@online{SOAP_W3C,
	author = {Box, Don and
 Ehnebuske, David and
 Kakivaya, Gopal and
 Layman, Andrew and
 Mendelsohn, Noah and
 Nielsen, Henrik Frystyk and
 Thatte, Satish and
 Winer, Dave},
	title = {Simple Object Access Protocol (SOAP) 1.1},
	year = 2000,
	url = {https://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383512},
	urldate = {2010-10-20}
}

@online{WebServiceW3C,
	author = {Booth, David and
 Haas, Hugo and
 McCabe, Francis and
 Newcomer, Eric and
 Champion, Michael and
 Ferris, Chris and
 Orchard, David
    },
	title = {Web Services Architecture},
	year = 2004,
	url = {https://www.w3.org/TR/ws-arch/},
	urldate = {2021-10-20}
}

@misc{rfc2119,
	series = {Request for Comments},
	number = 2119,
	howpublished = {RFC 2119},
	publisher = {RFC Editor},
	doi = {10.17487/RFC2119},
	url = {https://rfc-editor.org/rfc/rfc2119.txt},
	author = {Scott O. Bradner},
	title = {{Key words for use in RFCs to Indicate Requirement Levels}},
	pagetotal = 3,
	year = 1997,
	month = mar,
	abstract = {In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.},
}

@misc{rfc7540,
	series = {Request for Comments},
	number = 7540,
	howpublished = {RFC 7540},
	publisher = {RFC Editor},
	doi = {10.17487/RFC7540},
	url = {https://rfc-editor.org/rfc/rfc7540.txt},
	author = {Mike Belshe and Roberto Peon and Martin Thomson},
	title = {{Hypertext Transfer Protocol Version 2 (HTTP/2)}},
	pagetotal = 96,
	year = 2015,
	month = may,
	abstract = {This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2). HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection. It also introduces unsolicited push of representations from servers to clients. This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax. HTTP's existing semantics remain unchanged.},
}

@misc{rfc1945,
	series = {Request for Comments},
	number = 1945,
	howpublished = {RFC 1945},
	publisher = {RFC Editor},
	doi = {10.17487/RFC1945},
	url = {https://rfc-editor.org/rfc/rfc1945.txt},
	author = {Henrik Nielsen and Roy T. Fielding and Tim Berners-Lee},
	title = {{Hypertext Transfer Protocol -- HTTP/1.0}},
	pagetotal = 60,
	year = 1996,
	month = may,
	abstract = {The Hypertext Transfer Protocol (HTTP) is an application-level protocol with the lightness and speed necessary for distributed, collaborative, hypermedia information systems. This memo provides information for the Internet community. This memo does not specify an Internet standard of any kind.},
}

@misc{rfc7230,
	series = {Request for Comments},
	number = 7230,
	howpublished = {RFC 7230},
	publisher = {RFC Editor},
	doi = {10.17487/RFC7230},
	url = {https://rfc-editor.org/rfc/rfc7230.txt},
	author = {Roy T. Fielding and Julian Reschke},
	title = {{Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing}},
	pagetotal = 89,
	year = 2014,
	month = jun,
	abstract = {The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.},
}

@misc{rfc959,
	series = {Request for Comments},
	number = 959,
	howpublished = {RFC 959},
	publisher = {RFC Editor},
	doi = {10.17487/RFC0959},
	url = {https://rfc-editor.org/rfc/rfc959.txt},
	author = {J. Postel and J. Reynolds},
	title = {{File Transfer Protocol}},
	pagetotal = 69,
	year = 1985,
	month = oct,
	abstract = {This memo is the official specification of the File Transfer Protocol (FTP) for the DARPA Internet community. The primary intent is to clarify and correct the documentation of the FTP specification, not to change the protocol. The following new optional commands are included in this edition of the specification: Change to Parent Directory (CDUP), Structure Mount (SMNT), Store Unique (STOU), Remove Directory (RMD), Make Directory (MKD), Print Directory (PWD), and System (SYST). Note that this specification is compatible with the previous edition.},
}

@misc{rfc2246,
	series = {Request for Comments},
	number = 2246,
	howpublished = {RFC 2246},
	publisher = {RFC Editor},
	doi = {10.17487/RFC2246},
	url = {https://rfc-editor.org/rfc/rfc2246.txt},
	author = {Christopher Allen and Tim Dierks},
	title = {{The TLS Protocol Version 1.0}},
	pagetotal = 80,
	year = 1999,
	month = jan,
	abstract = {This document specifies Version 1.0 of the Transport Layer Security (TLS) protocol. The TLS protocol provides communications privacy over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.},
}

@misc{rfc8446,
	series = {Request for Comments},
	number = 8446,
	howpublished = {RFC 8446},
	publisher = {RFC Editor},
	doi = {10.17487/RFC8446},
	url = {https://rfc-editor.org/rfc/rfc8446.txt},
	author = {Eric Rescorla},
	title = {{The Transport Layer Security (TLS) Protocol Version 1.3}},
	pagetotal = 160,
	year = 2018,
	month = aug,
	abstract = {This document specifies version 1.3 of the Transport Layer Security (TLS) protocol. TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery. This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961. This document also specifies new requirements for TLS 1.2 implementations.},
}

@misc{rfc5246,
	series = {Request for Comments},
	number = 5246,
	howpublished = {RFC 5246},
	publisher = {RFC Editor},
	doi = {10.17487/RFC5246},
	url = {https://rfc-editor.org/rfc/rfc5246.txt},
	author = {Eric Rescorla and Tim Dierks},
	title = {{The Transport Layer Security (TLS) Protocol Version 1.2}},
	pagetotal = 104,
	year = 2008,
	month = aug,
	abstract = {This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol. The TLS protocol provides communications security over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. {[} STANDARDS-TRACK {]}},
}

@misc{rfc5280,
	series = {Request for Comments},
	number = 5280,
	howpublished = {RFC 5280},
	publisher = {RFC Editor},
	doi = {10.17487/RFC5280},
	url = {https://rfc-editor.org/rfc/rfc5280.txt},
	author = {Sharon Boeyen and Stefan Santesson and Tim Polk and Russ Housley and Stephen Farrell and David Cooper},
	title = {{Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile}},
	pagetotal = 151,
	year = 2008,
	month = may,
	abstract = {This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. {[} STANDARDS-TRACK {]}},
}

@misc{rfc7617,
	series = {Request for Comments},
	number = 7617,
	howpublished = {RFC 7617},
	publisher = {RFC Editor},
	doi = {10.17487/RFC7617},
	url = {https://rfc-editor.org/rfc/rfc7617.txt},
	author = {Julian Reschke},
	title = {{The 'Basic' HTTP Authentication Scheme}},
	pagetotal = 15,
	year = 2015,
	month = sep,
	abstract = {This document defines the "Basic" Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.},
}

@misc{rfc7235,
	series = {Request for Comments},
	number = 7235,
	howpublished = {RFC 7235},
	publisher = {RFC Editor},
	doi = {10.17487/RFC7235},
	url = {https://rfc-editor.org/rfc/rfc7235.txt},
	author = {Roy T. Fielding and Julian Reschke},
	title = {{Hypertext Transfer Protocol (HTTP/1.1): Authentication}},
	pagetotal = 19,
	year = 2014,
	month = jun,
	abstract = {The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems. This document defines the HTTP Authentication framework.},
}

@misc{rfc7616,
	series = {Request for Comments},
	number = 7616,
	howpublished = {RFC 7616},
	publisher = {RFC Editor},
	doi = {10.17487/RFC7616},
	url = {https://rfc-editor.org/rfc/rfc7616.txt},
	author = {Rifaat Shekh-Yusef and David Ahrens and Sophie Bremer},
	title = {{HTTP Digest Access Authentication}},
	pagetotal = 32,
	year = 2015,
	month = sep,
	abstract = {The Hypertext Transfer Protocol (HTTP) provides a simple challenge- response authentication mechanism that may be used by a server to challenge a client request and by a client to provide authentication information. This document defines the HTTP Digest Authentication scheme that can be used with the HTTP authentication mechanism.},
}

@misc{rfc4178,
	series = {Request for Comments},
	number = 4178,
	howpublished = {RFC 4178},
	publisher = {RFC Editor},
	doi = {10.17487/RFC4178},
	url = {https://rfc-editor.org/rfc/rfc4178.txt},
	author = {Paul J. Leach and Karthik Jaganathan and Larry Zhu and Wyllys Ingersoll},
	title = {{The Simple and Protected Generic Security Service Application Program Interface (GSS-API) Negotiation Mechanism}},
	pagetotal = 22,
	year = 2005,
	month = oct,
	abstract = {This document specifies a negotiation mechanism for the Generic Security Service Application Program Interface (GSS-API), which is described in RFC 2743. GSS-API peers can use this negotiation mechanism to choose from a common set of security mechanisms. If per-message integrity services are available on the established mechanism context, then the negotiation is protected against an attacker that forces the selection of a mechanism not desired by the peers. This mechanism replaces RFC 2478 in order to fix defects in that specification and to describe how to inter-operate with implementations of that specification that are commonly deployed on the Internet. {[}STANDARDS-TRACK{]}},
}

@misc{rfc6749,
	series = {Request for Comments},
	number = 6749,
	howpublished = {RFC 6749},
	publisher = {RFC Editor},
	doi = {10.17487/RFC6749},
	url = {https://rfc-editor.org/rfc/rfc6749.txt},
	author = {Dick Hardt},
	title = {{The OAuth 2.0 Authorization Framework}},
	pagetotal = 76,
	year = 2012,
	month = oct,
	abstract = {The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf. This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849. {[}STANDARDS-TRACK{]}},
}

@misc{rfc5849,
	series = {Request for Comments},
	number = 5849,
	howpublished = {RFC 5849},
	publisher = {RFC Editor},
	doi = {10.17487/RFC5849},
	url = {https://rfc-editor.org/rfc/rfc5849.txt},
	author = {Eran Hammer-Lahav},
	title = {{The OAuth 1.0 Protocol}},
	pagetotal = 38,
	year = 2010,
	month = apr,
	abstract = {OAuth provides a method for clients to access server resources on behalf of a resource owner (such as a different client or an end-user). It also provides a process for end-users to authorize third-party access to their server resources without sharing their credentials (typically, a username and password pair), using user-agent redirections. This document is not an Internet Standards Track specification; it is published for informational purposes.},
}

@misc{oidc,
	howpublished = {OpenID Connect Core 1.0 incorporating errata set 1},
	publisher = {The OpenID Foundation},
	url = {https://openid.net/specs/openid-connect-core-1_0.html},
	author = {Nat Sakimura and John Bradley and Michael B. Jones and Breno de Medeiros and Chuck Mortimore},
	title = {{OpenID Connect Core 1.0 incorporating errata set 1}},
	year = 2014,
	month = nov,
	abstract = {OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0 protocol. It enables Clients to verify the identity of the End-User based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about the End-User in an interoperable and REST-like manner.
This specification defines the core OpenID Connect functionality: authentication built on top of OAuth 2.0 and the use of Claims to communicate information about the End-User. It also describes the security and privacy considerations for using OpenID Connect.},
}